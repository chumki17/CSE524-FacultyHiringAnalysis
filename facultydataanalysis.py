# -*- coding: utf-8 -*-
"""FacultyDataAnalysis.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1WTZxVlX22UsqFY4Qc3eiZgiLMnQAYuiX
"""

from google.colab import drive
drive.mount('/content/drive', force_remount=True)

import pandas as pd
import numpy as np
import csv

root_path = '/content/drive/My Drive/20_Chu_Van_524'
df = pd.read_csv(root_path + '/Faculty_dataset_v3.csv', encoding= "ISO-8859-1")
df = df.replace(np.nan, '', regex=True)

df[1:10]

df['University BS'] = df['University BS'].str.split(' - ').str[0]
df['University MS'] = df['University BS'].str.split(' - ').str[0]
df['University Phd'] = df['University BS'].str.split(' - ').str[0]

df_state_colleges = df.groupby(['State', 'University'])['Faculty name'].count().to_dict()
print(df_state_colleges)
with open('state_colleges.csv', 'w') as f:
  writer = csv.writer(f)
  writer.writerow(["state", "colleges"])
  for k in df_state_colleges.keys():
    writer.writerow([k[0], k[1]])

df[757:]

""" # Data for visualization 1 (Choropleth Map) - Ratio of males/females state wise"""

groupby_state_gender_count = df.groupby(["State", "Gender"])["Faculty name"].count()
print(groupby_state_gender_count)

groupby_state_gender_count.to_dict()

df_state_gender_dict = groupby_state_gender_count.to_dict()
state_set = set()
vals = []
for t in df_state_gender_dict.keys():
  state_set.add(t[0])

for t in state_set:
  key_m = (t, 0)
  key_f = (t, 1)
  if key_m not in df_state_gender_dict:
    df_state_gender_dict[key_m] = 0
  if key_f not in df_state_gender_dict:
    df_state_gender_dict[key_f] = 0
  if df_state_gender_dict[key_f] is not 0:
    ratio = df_state_gender_dict[key_m] / df_state_gender_dict[key_f]
  vals.append(ratio)
df_state_gender_dict

vals
min(vals)
# max(vals)

max(vals)

min_A = 3.0
max_A = 10.7
with open('state_gender_ratio_data_normalized.csv', 'w') as f:
  writer = csv.writer(f)
  writer.writerow(["states", "male", "female", "ratio", "norm_ratio"])
  for t in state_set:
    m = df_state_gender_dict[(t, 0.0)]
    f = df_state_gender_dict[(t, 1.0)]
    if f is 0:
      g_ratio = 0
      v_dash = 1
    else:
      g_ratio = m / f
      v_dash = ((g_ratio - min_A)/(max_A - min_A)) * (1-0) + 0
      print(v_dash)
    writer.writerow([t, m, f, g_ratio, v_dash ])

"""# Data for visualization 2 - Calculate ratio of males, females per college category

BASIC STACKED BAR PLOT
"""

gender_rank_category_count = {'1': {'M': 0, 'F': 0}, '2': {'M': 0, 'F': 0}, '3': {'M': 0, 'F': 0}, '4': {'M': 0, 'F': 0}, '5': {'M': 0, 'F': 0}}
count = 0
for index, row in df.iterrows():
  if row['Gender'] is not '':
    if int(row['Gender']) is 0:
      gender_rank_category_count[str(row['Category University (Rank)'])]['M'] = gender_rank_category_count[str(row['Category University (Rank)'])]['M'] + 1
    if int(row['Gender']) is 1:
      gender_rank_category_count[str(row['Category University (Rank)'])]['F'] = gender_rank_category_count[str(row['Category University (Rank)'])]['F'] + 1
    
print(gender_rank_category_count)

with open('college_categ_male_female_ratio.csv', 'w') as f:
  writer = csv.writer(f)
  writer.writerow(["College_Categ", "Male", "Female", "Ratio"])
  for t in gender_rank_category_count.keys():
    ratio = gender_rank_category_count[t]['M'] / gender_rank_category_count[t]['F']
    writer.writerow([t, gender_rank_category_count[t]['M'], gender_rank_category_count[t]['F'], ratio])

"""# Data for visualization 3 - Calculate median citations/h-index/i-10 index per college category

group by college instead of college rank
"""

df_temp = df
df_temp.loc[df_temp['Citations'] == ''] = 0

df_temp['Citations'] = df_temp['Citations'].astype(str).astype(float)
median_citations_per_college = df_temp.groupby('Category University (Rank)')['Citations'].median()
median_citations_per_college = median_citations_per_college.to_dict()

df_temp = df
df_temp.loc[df_temp['h-index'] == ''] = 0
df_temp['h-index'] = df_temp['h-index'].astype(str).astype(float)
median_h_index_per_college = df_temp.groupby('Category University (Rank)')['h-index'].median()
median_h_index_per_college = median_h_index_per_college.to_dict()

median_h_index_per_college

research_details_college_categ = {
    1:[0,0], 2:[0,0], 3:[0,0], 4:[0, 0], 5:[0,0]
}
for k in median_citations_per_college.keys():
  if k in research_details_college_categ.keys():
    research_details_college_categ[k][0] = median_citations_per_college[k]

for k in median_h_index_per_college.keys():
  if k in research_details_college_categ.keys():
    research_details_college_categ[k][1] = median_h_index_per_college[k]

research_details_college_categ

with open('research_details_college_categ.csv', 'w') as f:
  writer = csv.writer(f)
  writer.writerow(["Category", "Citations", "H-Index"])
  for k in research_details_college_categ.keys():
    writer.writerow([k, research_details_college_categ[k][0], research_details_college_categ[k][1]])

"""# Data for visualization 4 - Calculate median citations / h-index / i-10 index per college"""

df_temp = df
df_temp.loc[df_temp['Citations'] == ''] = 0
df_temp['Citations'] = df_temp['Citations'].astype(str).astype(float)
median_citations_per_college = df_temp.groupby(['Category University (Rank)', 'University'])['Citations'].median()
median_citations_per_college = median_citations_per_college.to_dict() 
median_citations_per_college



df_temp = df
df_temp.loc[df_temp['h-index'] == ''] = 0
df_temp['h-index'] = df_temp['h-index'].astype(str).astype(float)
median_h_index_per_college = df_temp.groupby(['Category University (Rank)', 'University'])['h-index'].median()
median_h_index_per_college = median_h_index_per_college.to_dict() 
median_h_index_per_college

college_set = set(median_h_index_per_college.keys())
college_research_details = {}
for k in college_set:
  if k[0] is 0 and k[1] is 0:
    continue
  d = []
  d.append(median_citations_per_college[k])
  d.append(median_h_index_per_college[k])
  # d.append(median_i10_index_per_college[k])
  college_research_details[k] = d
college_research_details

with open('research_details_college1.csv', 'w') as f:
  writer = csv.writer(f)
  writer.writerow(["College", "Citations", "H-Index"])
  for k in college_research_details.keys():
    if k[0] is 0:
      continue
    if k[0] is 1:
      writer.writerow([k[1], college_research_details[k][0], college_research_details[k][1]])

with open('research_details_college2.csv', 'w') as f:
  writer = csv.writer(f)
  writer.writerow(["College", "Citations", "H-Index"])
  for k in college_research_details.keys():
    if k[0] is 0:
      continue
    if k[0] is 2:
      writer.writerow([k[1], college_research_details[k][0], college_research_details[k][1]])

with open('research_details_college3.csv', 'w') as f:
  writer = csv.writer(f)
  writer.writerow(["College", "Citations", "H-Index"])
  for k in college_research_details.keys():
    if k[0] is 0:
      continue
    if k[0] is 3:
      writer.writerow([k[1], college_research_details[k][0], college_research_details[k][1]])

with open('research_details_college4.csv', 'w') as f:
  writer = csv.writer(f)
  writer.writerow(["College", "Citations", "H-Index"])
  for k in college_research_details.keys():
    if k[0] is 0:
      continue
    if k[0] is 4:
      writer.writerow([k[1], college_research_details[k][0], college_research_details[k][1]])

with open('research_details_college5.csv', 'w') as f:
  writer = csv.writer(f)
  writer.writerow(["College", "Citations", "H-Index"])
  for k in college_research_details.keys():
    if k[0] is 0:
      continue
    if k[0] is 5:
      writer.writerow([k[1], college_research_details[k][0], college_research_details[k][1]])

"""## (NOT DOING THIS)Data for visualization 5 - Calculate mean / max / min i10-index per college category (except college category 5)"""

df_temp = df[df["Category University (Rank)"] != 5]
df_temp.loc[df_temp['i10-index'] == ''] = 0
df_temp['i10-index'] = df_temp['i10-index'].astype(str).astype(float)
avg_i10_index_per_college = df_temp.groupby('Category University (Rank)')['i10-index'].mean()
avg_i10_index_per_college

max_i10_index_per_college = df_temp.groupby('Category University (Rank)')['i10-index'].max()
max_i10_index_per_college

min_i10_index_per_college = df_temp.groupby('Category University (Rank)')['i10-index'].min()
min_i10_index_per_college

"""# Re Read data file"""

#re read the data file
df = pd.read_csv(root_path + '/Faculty_dataset_v3.csv', encoding= "ISO-8859-1")
df = df.replace(np.nan, '', regex=True)

"""# Visualization 5 - Count of profs who did BS in US vs BS in non US"""

#check for count of profs whose place of BS is available in the data
df_temp_valid = df[df["Country BS"] != '']
print(len(df_temp_valid))
# 1006 rows available
count_USA_BS = 0
count_non_USA_BS = 0
for index, row in df_temp_valid.iterrows():
  # print(row['Country BS'], row['Faculty name'])
  if 'USA' in row['Country BS']:
    count_USA_BS = count_USA_BS + 1
  else:
    count_non_USA_BS = count_non_USA_BS + 1 

print(count_USA_BS)
print(count_non_USA_BS)

"""#  Visualization 5 - Count of profs who did MS in US vs MS in non US"""

#check for count of profs whose place of MS is available in the data
df_temp_valid = df[df["Country MS"] != '']
print(len(df_temp_valid))
count_USA_MS = 0
count_non_USA_MS = 0
for index, row in df_temp_valid.iterrows():
  if 'USA' in row['Country MS']:
    count_USA_MS = count_USA_MS + 1
  else:
    count_non_USA_MS = count_non_USA_MS + 1 

print(count_USA_MS)
print(count_non_USA_MS)

"""#  Visualization 5 - Count of profs who did Phd in US vs Phd in non US"""

#check for count of profs whose place of Phd is available in the data
df_temp_valid = df[df["Country Phd"] != '']
print(len(df_temp_valid))
count_USA_Phd = 0
count_non_USA_Phd = 0
for index, row in df_temp_valid.iterrows():
  if 'USA' in row['Country Phd']:
    count_USA_Phd = count_USA_Phd + 1
  else:
    count_non_USA_Phd = count_non_USA_Phd + 1 

print(count_USA_Phd)
print(count_non_USA_Phd)

with open('us_non_us_profs.csv', 'w') as f:
  writer = csv.writer(f)
  writer.writerow(["Degree", "USA", "Non_USA"])
  writer.writerow(["BS", count_USA_BS, count_non_USA_BS])
  writer.writerow(["MS", count_USA_MS, count_non_USA_MS])
  writer.writerow(["Phd", count_USA_Phd, count_non_USA_Phd])

"""# Visualization 6 - Popular Countries of BS degree for non USA BS profs"""

df_temp_valid = df[df["Country BS"] != '']

for index, row in df_temp_valid.iterrows():
  if '-' in row['Country BS']:
    country = str(row['Country BS']).split('-')[1].lstrip()
    df_temp_valid.loc[index,'Country BS'] = country

# Colleges that have most number of Non US BS graduates
df_temp_non_US = df_temp_valid[~df_temp_valid["Country BS"].str.contains('USA')]
df_temp_non_US_colleges = df_temp_non_US.groupby('University')['Faculty name'].count().nlargest(5)
print(df_temp_non_US_colleges)


df_temp_valid_US = df_temp_valid.groupby('Country BS')['Faculty name'].count().nlargest(10)
print(df_temp_valid_US)

df_temp_valid_US_dict = df_temp_valid_US.to_dict()
with open('popular_countries_non_USA_BS.csv', 'w') as f:
  writer = csv.writer(f)
  writer.writerow(["Counry", "Count"])
  for k in df_temp_valid_US_dict.keys():
    writer.writerow([k, df_temp_valid_US_dict[k]])

"""# Visualization 6 - Popular Countries of MS degree for non USA MS profs

LINE CHART
"""

df_temp_valid = df[df["Country MS"] != '']
import re

for index, row in df_temp_valid.iterrows():
  if '-' in row['Country MS']:
    country = str(row['Country MS']).split('-')[1].lstrip().rstrip()
    country = re.sub(r'[^\x00-\x7F]+',' ', country).lstrip().rstrip()
    df_temp_valid.loc[index,'Country MS'] = country

# Colleges that have most number of Non US MS graduates
df_temp_non_US = df_temp_valid[~df_temp_valid["Country MS"].str.contains('USA')]
df_temp_non_US_colleges = df_temp_non_US.groupby('University')['Faculty name'].count().nlargest(5)
print(df_temp_non_US_colleges)


df_temp_valid_US = df_temp_valid.groupby('Country MS')['Faculty name'].count().nlargest(10)
print(df_temp_valid_US)

df_temp_valid_US_dict = df_temp_valid_US.to_dict()
with open('popular_countries_non_USA_MS.csv', 'w') as f:
  writer = csv.writer(f)
  writer.writerow(["Counry", "Count"])
  for k in df_temp_valid_US_dict.keys():
    writer.writerow([k, df_temp_valid_US_dict[k]])

"""# Visualization 6 - Popular Countries of Phd degree for non USA Phd profs"""

df_temp_valid = df[df["Country Phd"] != '']

for index, row in df_temp_valid.iterrows():
  if '-' in row['Country Phd']:
    country = str(row['Country Phd']).split('-')[1].lstrip()
    country = re.sub(r'[^\x00-\x7F]+',' ', country).lstrip().rstrip()
    df_temp_valid.loc[index,'Country Phd'] = country

# Colleges that have most number of Non US Phd graduates
df_temp_non_US = df_temp_valid[~df_temp_valid["Country Phd"].str.contains('USA')]
df_temp_non_US_colleges = df_temp_non_US.groupby('University')['Faculty name'].count().nlargest(5)
print(df_temp_non_US_colleges)

df_temp_valid_US = df_temp_valid.groupby('Country Phd')['Faculty name'].count().nlargest(10)
print(df_temp_valid_US)
df_temp_valid_US_dict = df_temp_valid_US.to_dict()

with open('popular_countries_non_USA_Phd.csv', 'w') as f:
  writer = csv.writer(f)
  writer.writerow(["Counry", "Count"])
  for k in df_temp_valid_US_dict.keys():
    writer.writerow([k, df_temp_valid_US_dict[k]])

"""# Visualization 7 - Ratio of male to female professors in each area(specialization field)"""

# preprocessing for Area
df_temp = df[df['Area'] != '']
df_temp = df_temp[df_temp['Gender'] != '']
print(len(df_temp))

# Preprocessing for Area
area_prof_count = {'Algorithms' : 0, 'AI' : 0, 'Security' : 0, 'Database' : 0, 'Networks' : 0, 'Systems' : 0,
                  'Data Analytics' : 0, 'Distributed Systems' : 0, 'Computational Biology' : 0, 'Computer Architecture' : 0, 'Software Engineering' : 0,
                  'Computer Vision' : 0, 'ML' : 0, 'Graphics' : 0, 'Information Retrieval' : 0, 'Computing' : 0, 'Human Computer Interaction' : 0,
                  'NLP' : 0, 'Computer Education' : 0, 'Multimedia' : 0, 'Game Design' : 0,
                  'Robotics' : 0, 'Energy Efficient Systems' : 0, 'Knowledge Representation' : 0,
                  'Emerging Technology' : 0, 'Programming Languages' : 0, 'Modeling' : 0, 'Theory' : 0}

area_set = set(area_prof_count.keys())
len(area_set)

for index, row in df_temp.iterrows():
  specialty = row['Area'].lower()
  if 'algo' in specialty:
      area_prof_count['Algorithms'] = area_prof_count['Algorithms'] + 1
      df_temp.loc[index,'Area'] = 'Algorithms'
  elif 'artificial' in specialty or 'ai' in specialty or 'intelligence' in specialty:
      area_prof_count['AI'] = area_prof_count['AI'] + 1
      df_temp.loc[index,'Area'] = 'AI'
  elif 'security' in specialty or 'vulnerability' in specialty:
      area_prof_count['Security'] = area_prof_count['Security'] + 1
      df_temp.loc[index,'Area'] = 'Security'
  elif 'database' in specialty:
      area_prof_count['Database'] = area_prof_count['Database'] + 1
      df_temp.loc[index,'Area'] = 'Database'
  elif 'net' in specialty:
      area_prof_count['Networks'] = area_prof_count['Networks'] + 1
      df_temp.loc[index,'Area'] = 'Networks'
  elif 'sys' in specialty or 'resource optimization' in specialty:
      area_prof_count['Systems'] = area_prof_count['Systems'] + 1
      df_temp.loc[index,'Area'] = 'Systems'
  elif 'data' in specialty:
    area_prof_count['Data Analytics'] = area_prof_count['Data Analytics'] + 1
    df_temp.loc[index,'Area'] = 'Data Analytics'
  elif 'distrib' in specialty:
     area_prof_count['Distributed Systems'] = area_prof_count['Distributed Systems'] + 1
     df_temp.loc[index,'Area'] = 'Distributed Systems'
  elif 'bio' in specialty:
      area_prof_count['Computational Biology'] = area_prof_count['Computational Biology'] + 1
      df_temp.loc[index,'Area'] = 'Computational Biology'
  elif 'energy' in specialty or 'climate' in specialty:
    area_prof_count['Energy Efficient Systems'] = area_prof_count['Energy Efficient Systems'] + 1
    df_temp.loc[index,'Area'] = 'Energy Efficient Systems'
  elif 'hardware' in specialty or 'architecture' in specialty or 'vlsi' in specialty:
    area_prof_count['Computer Architecture'] = area_prof_count['Computer Architecture'] + 1
    df_temp.loc[index,'Area'] = 'Computer Architecture'
  elif 'engineering' in specialty or 'sof' in specialty:
    area_prof_count['Software Engineering'] = area_prof_count['Software Engineering'] + 1
    df_temp.loc[index,'Area'] = 'Software Engineering'
  elif 'human' in specialty or 'interaction' in specialty or 'hci' in specialty:
    area_prof_count['Human Computer Interaction'] = area_prof_count['Human Computer Interaction'] + 1
    df_temp.loc[index,'Area'] = 'Human Computer Interaction'
  elif 'vision' in specialty:
    area_prof_count['Computer Vision'] = area_prof_count['Computer Vision'] + 1
    df_temp.loc[index,'Area'] = 'Computer Vision'
  elif 'learning' in specialty or 'machine' in specialty or 'ml' in specialty:
    area_prof_count['ML'] = area_prof_count['ML'] + 1
    df_temp.loc[index,'Area'] = 'ML'
  elif 'graphics' in specialty:
    area_prof_count['Graphics'] = area_prof_count['Graphics'] + 1
    df_temp.loc[index,'Area'] = 'Graphics'
  elif 'information' in specialty or 'retriev' in specialty or 'world wide' in specialty:
    area_prof_count['Information Retrieval'] = area_prof_count['Information Retrieval'] + 1
    df_temp.loc[index,'Area'] = 'Information Retrieval'
  elif 'computing' in specialty:
    area_prof_count['Computing'] = area_prof_count['Computing'] + 1
    df_temp.loc[index,'Area'] = 'Computing'
  elif 'languages' in specialty or 'programming' in specialty or 'binary analysis' in specialty:
    area_prof_count['Programming Languages'] = area_prof_count['Programming Languages'] + 1
    df_temp.loc[index,'Area'] = 'Programming Languages'
  elif 'natural' in specialty or 'language' in specialty or 'nlp' in specialty:
    area_prof_count['NLP'] = area_prof_count['NLP'] + 1
    df_temp.loc[index,'Area'] = 'NLP'
  elif 'education' in specialty or 'adaptive technology' in specialty:
    area_prof_count['Computer Education'] = area_prof_count['Computer Education'] + 1
    df_temp.loc[index,'Area'] = 'Computer Education'
  elif 'multimedia' in specialty:
    area_prof_count['Multimedia'] = area_prof_count['Multimedia'] + 1
    df_temp.loc[index,'Area'] = 'Multimedia'
  elif 'robotics' in specialty:
    area_prof_count['Robotics'] = area_prof_count['Robotics'] + 1
    df_temp.loc[index,'Area'] = 'Robotics'
  elif 'knowledge' in specialty:
    area_prof_count['Knowledge Representation'] = area_prof_count['Knowledge Representation'] + 1
    df_temp.loc[index,'Area'] = 'Knowledge Representation'
  elif 'modeling' in specialty:
    area_prof_count['Modeling'] = area_prof_count['Modeling'] + 1
    df_temp.loc[index,'Area'] = 'Modeling'
  elif 'emerging' in specialty:
    area_prof_count['Emerging Technology'] = area_prof_count['Emerging Technology'] + 1
    df_temp.loc[index,'Area'] = 'Emerging Technology'
  elif 'theory' in specialty:
    area_prof_count['Theory'] = area_prof_count['Theory'] + 1
    df_temp.loc[index,'Area'] = 'Theory'
  elif 'game' in specialty:
    area_prof_count['Game Design'] = area_prof_count['Game Design'] + 1
    df_temp.loc[index,'Area'] = 'Game Design'
  else:
    print(specialty)



df_temp_area_group = df_temp.groupby(['Category University (Rank)', 'Area', 'Gender'])['Faculty name'].count()
df_temp_area_group_dict = df_temp_area_group.to_dict()
print(len(df_temp_area_group_dict.keys()))

for i in range(1,6):
  for a in area_prof_count.keys():
    key_m = (i, a, 0)
    key_f = (i, a, 1)
    if key_m not in df_temp_area_group_dict:
      df_temp_area_group_dict[key_m] = 0
    if key_f not in df_temp_area_group_dict:
      df_temp_area_group_dict[key_f] = 0
print(len(df_temp_area_group_dict.keys()))

print(df_temp_area_group_dict)

with open('area_gender_count1.csv', 'w') as f:
  writer = csv.writer(f)
  writer.writerow(["Area", "Male", "Female"])
  for t in area_set:
    writer.writerow([t, df_temp_area_group_dict[(1, t, 0)], df_temp_area_group_dict[(1, t, 1)] ])

with open('area_gender_count2.csv', 'w') as f:
  writer = csv.writer(f)
  writer.writerow(["Area", "Male", "Female"])
  for t in area_set:
    writer.writerow([t, df_temp_area_group_dict[(2, t, 0)], df_temp_area_group_dict[(2, t, 1)] ])

with open('area_gender_count3.csv', 'w') as f:
  writer = csv.writer(f)
  writer.writerow(["Area", "Male", "Female"])
  for t in area_set:
    writer.writerow([t, df_temp_area_group_dict[(3, t, 0)], df_temp_area_group_dict[(3, t, 1)] ])

with open('area_gender_count4.csv', 'w') as f:
  writer = csv.writer(f)
  writer.writerow(["Area", "Male", "Female"])
  for t in area_set:
    writer.writerow([t, df_temp_area_group_dict[(4, t, 0)], df_temp_area_group_dict[(4, t, 1)] ])

with open('area_gender_count5.csv', 'w') as f:
  writer = csv.writer(f)
  writer.writerow(["Area", "Male", "Female"])
  for t in area_set:
    writer.writerow([t, df_temp_area_group_dict[(5, t, 0)], df_temp_area_group_dict[(5, t, 1)] ])

"""# Visualization 8 - Popular Research Areas (extra)"""

print(area_prof_count)
area_prof_count_sorted = sorted(area_prof_count.items(), key = lambda x : x[1], reverse=True)
area_prof_count_sorted

with open('area_prof_count.csv', 'w') as f:
  writer = csv.writer(f)
  writer.writerow(["Area", "Prof_Count"])
  for t in area_prof_count_sorted:
    writer.writerow([t[0], t[1]])

